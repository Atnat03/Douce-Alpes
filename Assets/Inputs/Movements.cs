//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Inputs/Movements.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Inputs/Movements.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Movements: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Movements()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""Movements"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""8c133119-4943-4f1e-8161-fd9a4d3b9986"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""561fa832-fc1c-482d-b18b-dd40230d6a51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDelta"",
                    ""type"": ""Value"",
                    ""id"": ""17de2a4a-fd6e-4781-83ae-3dba412069a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""772a02c7-a407-454f-8108-faf7ea795e2e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""435ab778-d93e-4838-8c07-a5bf6aef08db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchZoom"",
                    ""type"": ""Button"",
                    ""id"": ""81b45d46-0e0f-4f05-b9db-6712787e6e95"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition0"",
                    ""type"": ""Value"",
                    ""id"": ""e9c75568-9c8b-48ff-9ab1-757d89e26292"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition1"",
                    ""type"": ""Value"",
                    ""id"": ""8be785fb-2dcb-4dad-8ea8-f6a747c1d435"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""8738bc74-43ba-4962-9231-4d26731ca86f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRight"",
                    ""type"": ""Button"",
                    ""id"": ""4d1da552-3ab7-4a5e-af36-bb3878892aae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""49e57d85-fa1a-4e2f-9ed6-836457e285ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""8cf33e70-259e-4080-aec4-ed398fdaf97a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""3c943507-c2ad-4654-8aa4-d9dc6a42e499"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""23c376c3-e9bf-43c6-92a7-437521d50032"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwipeDelta"",
                    ""type"": ""Value"",
                    ""id"": ""8c5b4888-f278-4352-835b-c772121eb22c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""5f6cc58f-2203-4487-bc0f-4170c3d2ec7b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""32bae958-5028-45ef-9af8-a42a8d09b65b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c5681914-4474-4e8d-a82d-c20f1fb7b840"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60e2012d-c3c3-4476-b2f1-427f9fb4194c"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37c63b83-abe7-4356-b09b-b2da09688d22"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dff16c94-2169-4c59-a74c-2b9552a1c5f0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""879e5b97-a7a4-4757-ba7b-98dcbc94dfd9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d7ecd863-f7df-4610-ac53-2c6d2de9ed1f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f59a100d-88c3-42ae-b1ee-d8e6039d72eb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f92ba70d-1d15-453f-bcb2-7a23099b5ae2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6ff6c385-a8aa-48e0-b4d1-f52d986444b1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7a14a78c-6a9a-4ae3-9f06-5742ec50613c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a563e85-39f4-4e28-8ed4-541a46d2efb4"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4a5ccf3-1b25-41fd-87fa-241bbc76e617"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""8027f951-ca42-4a50-b840-20629aae24e6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchZoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ff639259-ae41-4d68-b2a6-408f8ebfdbd2"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7f7e18a1-8e1f-4ae0-806d-1f9adf29fad2"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""70ff086f-326d-4208-9536-96c53dfbb7b8"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b62e3456-8aae-43a0-b6d5-3326818980c7"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed0ec9a6-f87c-4dd3-b0e2-5c4f53320d85"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2653c7ca-1352-4aae-aa20-c22afb44acf7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38773490-ff20-47db-82da-78777f989afe"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3f7631c-ed09-4a9e-bae5-7f4f4dffc437"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f4739b8-61b8-431e-954e-653f97f902e8"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""366957dc-0605-40b0-8a1d-39f0805c2427"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fc76b1e-4317-4d71-bb8d-f9d52402a597"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwipeDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cb22990-8d2f-4a1d-991d-5a0642df7e9c"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcdaa1a3-1c6d-4ea9-8426-189b48f1d702"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
        m_Main_MoveDelta = m_Main.FindAction("MoveDelta", throwIfNotFound: true);
        m_Main_MouseScroll = m_Main.FindAction("MouseScroll", throwIfNotFound: true);
        m_Main_MousePosition = m_Main.FindAction("MousePosition", throwIfNotFound: true);
        m_Main_TouchZoom = m_Main.FindAction("TouchZoom", throwIfNotFound: true);
        m_Main_TouchPosition0 = m_Main.FindAction("TouchPosition0", throwIfNotFound: true);
        m_Main_TouchPosition1 = m_Main.FindAction("TouchPosition1", throwIfNotFound: true);
        m_Main_MouseLeft = m_Main.FindAction("MouseLeft", throwIfNotFound: true);
        m_Main_MouseRight = m_Main.FindAction("MouseRight", throwIfNotFound: true);
        m_Main_PrimaryTouchPosition = m_Main.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
        m_Main_SecondaryTouchPosition = m_Main.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
        m_Main_PrimaryTouchPress = m_Main.FindAction("PrimaryTouchPress", throwIfNotFound: true);
        m_Main_SecondaryTouchPress = m_Main.FindAction("SecondaryTouchPress", throwIfNotFound: true);
        m_Main_SwipeDelta = m_Main.FindAction("SwipeDelta", throwIfNotFound: true);
        m_Main_PrimaryTouchDelta = m_Main.FindAction("PrimaryTouchDelta", throwIfNotFound: true);
        m_Main_SecondaryTouchDelta = m_Main.FindAction("SecondaryTouchDelta", throwIfNotFound: true);
    }

    ~@Movements()
    {
        UnityEngine.Debug.Assert(!m_Main.enabled, "This will cause a leak and performance issues, Movements.Main.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_Move;
    private readonly InputAction m_Main_MoveDelta;
    private readonly InputAction m_Main_MouseScroll;
    private readonly InputAction m_Main_MousePosition;
    private readonly InputAction m_Main_TouchZoom;
    private readonly InputAction m_Main_TouchPosition0;
    private readonly InputAction m_Main_TouchPosition1;
    private readonly InputAction m_Main_MouseLeft;
    private readonly InputAction m_Main_MouseRight;
    private readonly InputAction m_Main_PrimaryTouchPosition;
    private readonly InputAction m_Main_SecondaryTouchPosition;
    private readonly InputAction m_Main_PrimaryTouchPress;
    private readonly InputAction m_Main_SecondaryTouchPress;
    private readonly InputAction m_Main_SwipeDelta;
    private readonly InputAction m_Main_PrimaryTouchDelta;
    private readonly InputAction m_Main_SecondaryTouchDelta;
    /// <summary>
    /// Provides access to input actions defined in input action map "Main".
    /// </summary>
    public struct MainActions
    {
        private @Movements m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MainActions(@Movements wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Main/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_Main_Move;
        /// <summary>
        /// Provides access to the underlying input action "Main/MoveDelta".
        /// </summary>
        public InputAction @MoveDelta => m_Wrapper.m_Main_MoveDelta;
        /// <summary>
        /// Provides access to the underlying input action "Main/MouseScroll".
        /// </summary>
        public InputAction @MouseScroll => m_Wrapper.m_Main_MouseScroll;
        /// <summary>
        /// Provides access to the underlying input action "Main/MousePosition".
        /// </summary>
        public InputAction @MousePosition => m_Wrapper.m_Main_MousePosition;
        /// <summary>
        /// Provides access to the underlying input action "Main/TouchZoom".
        /// </summary>
        public InputAction @TouchZoom => m_Wrapper.m_Main_TouchZoom;
        /// <summary>
        /// Provides access to the underlying input action "Main/TouchPosition0".
        /// </summary>
        public InputAction @TouchPosition0 => m_Wrapper.m_Main_TouchPosition0;
        /// <summary>
        /// Provides access to the underlying input action "Main/TouchPosition1".
        /// </summary>
        public InputAction @TouchPosition1 => m_Wrapper.m_Main_TouchPosition1;
        /// <summary>
        /// Provides access to the underlying input action "Main/MouseLeft".
        /// </summary>
        public InputAction @MouseLeft => m_Wrapper.m_Main_MouseLeft;
        /// <summary>
        /// Provides access to the underlying input action "Main/MouseRight".
        /// </summary>
        public InputAction @MouseRight => m_Wrapper.m_Main_MouseRight;
        /// <summary>
        /// Provides access to the underlying input action "Main/PrimaryTouchPosition".
        /// </summary>
        public InputAction @PrimaryTouchPosition => m_Wrapper.m_Main_PrimaryTouchPosition;
        /// <summary>
        /// Provides access to the underlying input action "Main/SecondaryTouchPosition".
        /// </summary>
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_Main_SecondaryTouchPosition;
        /// <summary>
        /// Provides access to the underlying input action "Main/PrimaryTouchPress".
        /// </summary>
        public InputAction @PrimaryTouchPress => m_Wrapper.m_Main_PrimaryTouchPress;
        /// <summary>
        /// Provides access to the underlying input action "Main/SecondaryTouchPress".
        /// </summary>
        public InputAction @SecondaryTouchPress => m_Wrapper.m_Main_SecondaryTouchPress;
        /// <summary>
        /// Provides access to the underlying input action "Main/SwipeDelta".
        /// </summary>
        public InputAction @SwipeDelta => m_Wrapper.m_Main_SwipeDelta;
        /// <summary>
        /// Provides access to the underlying input action "Main/PrimaryTouchDelta".
        /// </summary>
        public InputAction @PrimaryTouchDelta => m_Wrapper.m_Main_PrimaryTouchDelta;
        /// <summary>
        /// Provides access to the underlying input action "Main/SecondaryTouchDelta".
        /// </summary>
        public InputAction @SecondaryTouchDelta => m_Wrapper.m_Main_SecondaryTouchDelta;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MainActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MainActions" />
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MoveDelta.started += instance.OnMoveDelta;
            @MoveDelta.performed += instance.OnMoveDelta;
            @MoveDelta.canceled += instance.OnMoveDelta;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @TouchZoom.started += instance.OnTouchZoom;
            @TouchZoom.performed += instance.OnTouchZoom;
            @TouchZoom.canceled += instance.OnTouchZoom;
            @TouchPosition0.started += instance.OnTouchPosition0;
            @TouchPosition0.performed += instance.OnTouchPosition0;
            @TouchPosition0.canceled += instance.OnTouchPosition0;
            @TouchPosition1.started += instance.OnTouchPosition1;
            @TouchPosition1.performed += instance.OnTouchPosition1;
            @TouchPosition1.canceled += instance.OnTouchPosition1;
            @MouseLeft.started += instance.OnMouseLeft;
            @MouseLeft.performed += instance.OnMouseLeft;
            @MouseLeft.canceled += instance.OnMouseLeft;
            @MouseRight.started += instance.OnMouseRight;
            @MouseRight.performed += instance.OnMouseRight;
            @MouseRight.canceled += instance.OnMouseRight;
            @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
            @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
            @PrimaryTouchPress.started += instance.OnPrimaryTouchPress;
            @PrimaryTouchPress.performed += instance.OnPrimaryTouchPress;
            @PrimaryTouchPress.canceled += instance.OnPrimaryTouchPress;
            @SecondaryTouchPress.started += instance.OnSecondaryTouchPress;
            @SecondaryTouchPress.performed += instance.OnSecondaryTouchPress;
            @SecondaryTouchPress.canceled += instance.OnSecondaryTouchPress;
            @SwipeDelta.started += instance.OnSwipeDelta;
            @SwipeDelta.performed += instance.OnSwipeDelta;
            @SwipeDelta.canceled += instance.OnSwipeDelta;
            @PrimaryTouchDelta.started += instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.performed += instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.canceled += instance.OnPrimaryTouchDelta;
            @SecondaryTouchDelta.started += instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.performed += instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.canceled += instance.OnSecondaryTouchDelta;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MainActions" />
        private void UnregisterCallbacks(IMainActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MoveDelta.started -= instance.OnMoveDelta;
            @MoveDelta.performed -= instance.OnMoveDelta;
            @MoveDelta.canceled -= instance.OnMoveDelta;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @TouchZoom.started -= instance.OnTouchZoom;
            @TouchZoom.performed -= instance.OnTouchZoom;
            @TouchZoom.canceled -= instance.OnTouchZoom;
            @TouchPosition0.started -= instance.OnTouchPosition0;
            @TouchPosition0.performed -= instance.OnTouchPosition0;
            @TouchPosition0.canceled -= instance.OnTouchPosition0;
            @TouchPosition1.started -= instance.OnTouchPosition1;
            @TouchPosition1.performed -= instance.OnTouchPosition1;
            @TouchPosition1.canceled -= instance.OnTouchPosition1;
            @MouseLeft.started -= instance.OnMouseLeft;
            @MouseLeft.performed -= instance.OnMouseLeft;
            @MouseLeft.canceled -= instance.OnMouseLeft;
            @MouseRight.started -= instance.OnMouseRight;
            @MouseRight.performed -= instance.OnMouseRight;
            @MouseRight.canceled -= instance.OnMouseRight;
            @PrimaryTouchPosition.started -= instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.performed -= instance.OnPrimaryTouchPosition;
            @PrimaryTouchPosition.canceled -= instance.OnPrimaryTouchPosition;
            @SecondaryTouchPosition.started -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled -= instance.OnSecondaryTouchPosition;
            @PrimaryTouchPress.started -= instance.OnPrimaryTouchPress;
            @PrimaryTouchPress.performed -= instance.OnPrimaryTouchPress;
            @PrimaryTouchPress.canceled -= instance.OnPrimaryTouchPress;
            @SecondaryTouchPress.started -= instance.OnSecondaryTouchPress;
            @SecondaryTouchPress.performed -= instance.OnSecondaryTouchPress;
            @SecondaryTouchPress.canceled -= instance.OnSecondaryTouchPress;
            @SwipeDelta.started -= instance.OnSwipeDelta;
            @SwipeDelta.performed -= instance.OnSwipeDelta;
            @SwipeDelta.canceled -= instance.OnSwipeDelta;
            @PrimaryTouchDelta.started -= instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.performed -= instance.OnPrimaryTouchDelta;
            @PrimaryTouchDelta.canceled -= instance.OnPrimaryTouchDelta;
            @SecondaryTouchDelta.started -= instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.performed -= instance.OnSecondaryTouchDelta;
            @SecondaryTouchDelta.canceled -= instance.OnSecondaryTouchDelta;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MainActions.UnregisterCallbacks(IMainActions)" />.
        /// </summary>
        /// <seealso cref="MainActions.UnregisterCallbacks(IMainActions)" />
        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MainActions.AddCallbacks(IMainActions)" />
        /// <seealso cref="MainActions.RemoveCallbacks(IMainActions)" />
        /// <seealso cref="MainActions.UnregisterCallbacks(IMainActions)" />
        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MainActions" /> instance referencing this action map.
    /// </summary>
    public MainActions @Main => new MainActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Main" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MainActions.AddCallbacks(IMainActions)" />
    /// <seealso cref="MainActions.RemoveCallbacks(IMainActions)" />
    public interface IMainActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveDelta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDelta(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseScroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseScroll(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MousePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TouchZoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouchZoom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TouchPosition0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouchPosition0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TouchPosition1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouchPosition1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouchPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouchPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouchPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouchPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouchPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouchPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwipeDelta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwipeDelta(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouchDelta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouchDelta(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouchDelta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouchDelta(InputAction.CallbackContext context);
    }
}
